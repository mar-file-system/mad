#!/usr/bin/env python3
# Copyright(c) 2015, Los Alamos National Security, LLC
# All rights reserved.

# Copyright 2015.  Los Alamos National Security, LLC. This software was
# produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos
# National Laboratory(LANL), which is operated by Los Alamos National
# Security, LLC for the U.S. Department of Energy. The U.S. Government has
# rights to use, reproduce, and distribute this software.  NEITHER THE
# GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS
# OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If
# software is modified to produce derivative works, such modified software
# should be clearly marked, so as not to confuse it with the version available
# from LANL.

# Additionally, redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:

# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.

# 3. Neither the name of Los Alamos National Security, LLC, Los Alamos
# National Laboratory, LANL, the U.S. Government, nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL
# SECURITY, LLC OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE, DATA,
# OR PROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----
# MarFS is released under the BSD license.

# MarFS was reviewed and released by LANL under Los Alamos Computer Code
# identifier: LA-CC-15-039.

# MarFS uses libaws4c for Amazon S3 object communication. The original version
# is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
# LANL added functionality to the original work. The original work plus
# LANL contributions is found at https: // github.com/jti-lanl/aws4c.

# GNU licenses can be found at http: // www.gnu.org/licenses/.

import argparse
import sys
import os
import copy
from lxml import etree
from storage_tools.interfaces import storage as sti
from storage_tools.interfaces import metadata as mdi

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def sanity_check_perms(perms):
    valid_perms = ["RD", "WD", "RM", "WM", "UD", "TD"]
    perms = perms.split(",")
    for p in perms:
        if p not in valid_perms:
            raise ValueError

def check_ns_exists(repo, name):
    for ns in repo.find("metadata").findall("ns"):
        if ns.attrib["name"] == name:
            sys.exit("ERROR namespace name exists already")


def check_repo_exists(tree, name):
    for repo in tree.findall("repo"):
        if repo.attrib["name"] == name:
            sys.exit("ERROR: repo name exists already")


def get_tree_root(config_path):
    p = etree.XMLParser(remove_blank_text=True)
    with open(config_path, "r") as fp:
        data = etree.parse(fp, parser=p)

    return data.getroot()


def write_xml(config_path, tree):
    with open(config_path, "w") as fp:
        fp.write(etree.tostring(tree, pretty_print=True,
                                xml_declaration=True, encoding="utf-8").decode("utf-8"))


def modns(args):
    data = get_tree_root(args.marfs_config)
    for repo in data.iter("repo"):
        if repo.attrib["name"] == args.repo_name:
            md = repo.find("metadata")
            for ns in md.iter("ns"):
                if ns.attrib["name"] == args.N:
                    if args.newname:
                        check_ns_exists(repo, args.newname)
                        ns.attrib["name"] = args.newname
                    q = ns.find("quota")
                    p = ns.find("perms")
                    if args.f:
                        q.find("files").text = args.numfiles
                    if args.d:
                        q.find("data").text = args.data
                    if args.iperms:
                        sanity_check_perms(args.iperms)
                        p.find("interactive").text = args.iperms
                    if args.bperms:
                        sanity_check_perms(args.bperms)
                        p.find("batch").text = args.bperms

    write_xml(args.marfs_config, data)


def addns(args):
    data = get_tree_root(args.marfs_config)
    sanity_check_perms(args.bperms)
    sanity_check_perms(args.iperms)
    for repo in data.iter("repo"):
        if repo.attrib["name"] == args.repo_name:
            check_ns_exists(repo, args.name)
            md = repo.find("metadata")
            ns = etree.SubElement(md, "ns", name=args.name)
            quota = etree.SubElement(ns, "quota")
            etree.SubElement(quota, "files").text = args.numfiles
            etree.SubElement(quota, "data").text = args.data
            perms = etree.SubElement(ns, "perms")
            etree.SubElement(perms, "interactive").text = args.iperms
            etree.SubElement(perms, "batch").text = args.bperms

    write_xml(args.marfs_config, data)
    if not args.nodeploy:
        if args.gpfs_device:
            deploy_gpfs(args)
        else:
            sys.exit("ERROR; namespace not deployed. GPFS device not provided")


def delete_namespace(args):
    # This function should not perform backend operations
    # Just remove the namespace from the config
    data = get_tree_root(args.marfs_config)
    confirmed = False
    if args.force:
        confirmed = True
    else:
        i = input(f"Confirm delete {args.n}?\n(y/n):")
        if i.lower() == "y":
            confirmed = True

    if confirmed:
        for repo in data.iter("repo"):
            if repo.attrib["name"] == args.repo_name:
                md = repo.find("metadata")
                for ns in md.findall("ns"):
                    if ns.attrib["name"] == args.name:
                        md.remove(ns)

        write_xml(args.marfs_config, data)


def new_repo(args):
    data = get_tree_root(args.marfs_config)
    check_repo_exists(data, args.repo_name)
    r = data.find("repo")
    new_r = copy.deepcopy(r)
    new_r.attrib["name"] = args.repo_name
    md = new_r.find("metadata")
    for ns in md.findall("ns"):
        md.remove(ns)
    
    if args.pod_block_cap:
        new_r.find("data").find("DAL").find("dir_template").text = args.pod_block_cap
    else:
        dt_t = new_r.find("data").find("DAL").find("dir_template").text
        dt_t = dt_t.replace(r.attrib["name"], new_r.attrib["name"])
        new_r.find("data").find("DAL").find("dir_template").text = dt_t
        
    data.append(new_r)
    write_xml(args.marfs_config, data)


def single_node_example():
    config_file = "./config/single_node.xml"
    repo_name = "single"
    si = sti.StorageInterface(config_file, repo_name)
    si._trick_valid_host()
    si.set_working_repo(repo_name)
    blocks = int(si.working_repo.dal.n) + int(si.working_repo.dal.e)
    for block in range(blocks):
        si.block_num = int(block)
        si.create_pod_block_cap_scatter()

    mi = mdi.MetadataInterface(config_file, repo_name)
    mi.deploy_repo(repo_name)
    # need to link storage caps under metadata caps somehow


def deploy_zfs(args):
    si = sti.ZFSInterface(args.marfs_config, args.repo_name, args.jbod)
    si.deploy_repo(args.repo_name, args.datastore_name)


def deploy_gpfs(args):
    mi = mdi.GPFSInterface(
        args.marfs_config,
        args.repo_name,
        args.gpfs_device
    )
    mi.deploy_repo(args.repo_name)


def setup_zfs(args):
    si = sti.ZFSInterface(args.marfs_config, args.repo_name, args.jbod)
    si.setup_zfs(args.repo_name, args.datastore_name, args.force_zpools)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # deploy_zfs
    parser_deploy_zfs = subparsers.add_parser(
        'deploy_zfs',
        prog="deploy_zfs",
        help="Deploy a MarFS storage cluster to ZFS"
    )
    parser_deploy_zfs.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File'
    )
    parser_deploy_zfs.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy'
    )
    parser_deploy_zfs.add_argument(
        '-d',
        '--datastore_name',
        type=str,
        metavar="",
        help="Name of datastore to deploy",
        default="datastore"
    )
    parser_deploy_zfs.add_argument(
        '-j'
        '--jbod',
        type=str,
        metavar="",
        help="JBOD number",
        default="1"
    )
    parser_deploy_zfs.set_defaults(func=deploy_zfs)
    # Deploy GPFS
    parser_deploy_gpfs = subparsers.add_parser(
        'deploy_gpfs',
        prog="deploy_gpfs",
        help="Deploy MarFS to GPFS"
    )
    parser_deploy_gpfs.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File'
    )
    parser_deploy_gpfs.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy'
    )
    parser_deploy_gpfs.add_argument(
        'gpfs_device',
        metavar='GPFS_DEV',
        type=str,
        help='Path to GPFS device'
    )
    parser_deploy_gpfs.set_defaults(func=deploy_gpfs)

    # Setup ZFS
    parser_setup_zfs = subparsers.add_parser(
        'setup_zfs',
        prog="setup_zfs",
        help="Setup ZFS zpools for MarFS"
    )
    parser_setup_zfs.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File'
    )
    parser_setup_zfs.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy'
    )
    parser_setup_zfs.add_argument(
        '-d',
        '--datastore_name',
        type=str,
        metavar="",
        help="Name of datastore to deploy",
        default="datastore"
    )
    parser_setup_zfs.add_argument(
        '-j'
        '--jbod',
        type=str,
        metavar="",
        help="JBOD number",
        default="1"
    )
    parser_setup_zfs.add_argument(
        '-f',
        '--force_zpools',
        type=bool,
        metavar="",
        help="Force zpool creation",
        default=False
    )
    parser_setup_zfs.set_defaults(func=setup_zfs)

    # create new namespace
    parser_new_namespace = subparsers.add_parser(
        'addns',
        prog="addns",
        help="Create a new namespace",
    )
    parser_new_namespace.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File',
    )
    parser_new_namespace.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy',
    )
    parser_new_namespace.add_argument(
        'name',
        type=str,
        metavar="NAME",
        help="Name of namespace",
    )
    parser_new_namespace.add_argument(
        '-gd',
        '--gpfs_device',
        type=str,
        metavar="GPFS_DEVICE",
        help="Path to GPFS device for new namespace",
    )
    parser_new_namespace.add_argument(
        '-n',
        '--numfiles',
        type=str,
        metavar="FILES",
        help="Number of files in quota",
        default="-1",
    )
    parser_new_namespace.add_argument(
        '-d',
        '--data',
        type=str,
        metavar="DATA",
        help="Data limit in GiB",
        default="10740000000",
    )
    parser_new_namespace.add_argument(
        '-ip',
        '--iperms',
        type=str,
        metavar="IPERMS",
        help="Interactive permissions",
        default="RM,WM,RD,UD,TD",
    )
    parser_new_namespace.add_argument(
        '-bp',
        '--bperms',
        type=str,
        metavar="BPERMS",
        help="Batch permissions",
        default="RM,WM,RD,WD,UD,TD"
    )
    parser_new_namespace.add_argument(
        '--nodeploy',
        action='store_true',
        help="Skip deploying the namespace",
    )
    parser_new_namespace.set_defaults(func=addns)

    # update namespace
    parser_mod_namespace = subparsers.add_parser(
        'modns',
        prog="modns",
        help="Modify a namespace",
    )
    parser_mod_namespace.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File',
    )
    parser_mod_namespace.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy',
    )
    parser_mod_namespace.add_argument(
        'N',
        type=str,
        metavar="NAME",
        help="Name of namespace"
    )
    parser_mod_namespace.add_argument(
        '-nn',
        '--newname',
        type=str,
        metavar="NEWNAME",
        help="Name of namespace"
    )
    parser_mod_namespace.add_argument(
        '-n',
        '--numfiles',
        type=str,
        metavar="FILES",
        help="Number of files in quota",
        default=None
    )
    parser_mod_namespace.add_argument(
        '-d',
        '--data',
        type=str,
        metavar="DATA",
        help="Data limit in bytes",
        default=None
    )
    parser_mod_namespace.add_argument(
        '-ip',
        '--iperms',
        type=str,
        metavar="IPERMS",
        help="Interactive permissions",
        default=None
    )
    parser_mod_namespace.add_argument(
        '-bp',
        '--bperms',
        type=str,
        metavar="BPERMS",
        help="Batch permissions",
        default=None
    )
    parser_mod_namespace.set_defaults(func=modns)

    # delete namespace
    parser_del_namespace = subparsers.add_parser(
        'delns',
        prog="delns",
        help="Delete a namespace",
    )
    parser_del_namespace.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File',
    )
    parser_del_namespace.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy',
    )
    parser_del_namespace.add_argument(
        '-n',
        '--name',
        type=str,
        metavar="NAME",
        help="Name of namespace",
        required=True
    )
    parser_del_namespace.add_argument(
        '-f',
        '--force',
        action='store_true',
        help="Force delete",
    )
    parser_del_namespace.set_defaults(func=delete_namespace)

    # new repo
    parser_new_repo = subparsers.add_parser(
        'addrepo',
        prog="addrepo",
        help="Add a new repository",
    )
    parser_new_repo.add_argument(
        'marfs_config',
        metavar='MARFSCONFIGRC',
        type=str,
        help='Path to MarFS Configuration File',
    )
    parser_new_repo.add_argument(
        'repo_name',
        metavar='REPOSITORY_NAME',
        type=str,
        help='Repository Name to deploy',
    )
    parser_new_repo.add_argument(
        '-pbc',
        '--pod_block_cap',
        type=str,
        metavar="PBC PATH",
        help="New path template for pod/block/cap tree",
        default=None
    )
    parser_new_repo.set_defaults(func=new_repo)

    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(1)

    args = parser.parse_args()
    args.func(args)
